---
title: "My title"
subtitle: "My subtitle if needed"
author: 
  - First author
  - Another author
thanks: "Code and data are available at: [https://github.com/RohanAlexander/starter_folder](https://github.com/RohanAlexander/starter_folder)."
date: today
date-format: long
abstract: "First sentence. Second sentence. Third sentence. Fourth sentence."
format: pdf
number-sections: true
bibliography: references.bib
---

```{r}
#| include: false
#| warning: false
#| message: false

library(tidyverse)
library(arrow)


#### Load Cleaned Data ####
price_analysis_data <- read_parquet(here::here("data/02-analysis_data/google_analysis_data.parquet"))
```


# Introduction

Overview paragraph

Estimand paragraph

Results paragraph

Why it matters paragraph

Telegraphing paragraph: The remainder of this paper is structured as follows. @sec-data....






# Data {#sec-data}

## Data Overview

The data for this paper, obtained from the Yahoo Finance API via the `tidyquant` library in R on November 19, 2024, includes historical stock price information for **Google (GOOG)**. This dataset spans from January 1, 2018, to December 31, 2024, and provides daily stock market data. Key variables include **`symbol`**, **`date`**, **`open`**, **`high`**, **`low`**, **`close`**, **`volume`**, and **`adjusted`** prices. Our analysis focuses on predicting the daily closing price (`close`) and examining patterns of price differences and percentage changes over time. To enhance the dataset’s predictive capabilities, we constructed additional features such as **`Price_Lag1`** (lagged closing prices), **`Price_Diff`** (daily price differences), **`Price_Change_Percent`** (percentage changes), and **`Volatility`** (rolling standard deviation). 

To ensure reliability, the data was pre-processed to remove missing values and compute these derived features. Observations with incomplete data were excluded to maintain consistency. Data cleaning and analysis were conducted using the `tidyverse`, `lubridate`, and `arrow` libraries in R. Further details on data cleaning and preparation are provided in [Appendix -@sec-data-cleaning].

## Measurement

Stock price data reflects market dynamics driven by a variety of factors, including economic conditions, corporate events, and investor sentiment. Raw variables such as **`open`**, **`high`**, **`low`**, and **`close`** prices represent snapshots of market behavior during each trading day. While precise, these variables often fail to capture intraday trends or the full complexity of trading activity.

Constructed variables such as **`Price_Diff`** and **`Price_Change_Percent`** quantify daily stock price movements, capturing day-to-day fluctuations. For example, **`Price_Diff`** measures absolute differences in closing prices between consecutive days, while **`Price_Change_Percent`** normalizes these changes relative to the previous day's price. These features allow for comparisons across periods and enhance the model’s ability to capture sequential trends. Additionally, rolling metrics like **`Volatility`** (7-day rolling standard deviation) and moving averages (**`Weekly_Avg_Close`**, **`Monthly_Avg_Close`**) provide insights into short- and long-term trends.

The variable **`volume`**, representing the number of shares traded daily, serves as a proxy for market activity and investor interest. Temporal features derived from **`date`**, such as day-of-week and month, capture seasonal or cyclical trading patterns. While these variables collectively provide a structured framework for analysis, their limitations must be acknowledged, such as potential oversimplifications of market behavior or the inability to account for external shocks.

## Variables

The dataset includes the following original and constructed variables relevant to the analysis of stock price patterns:
**Original Variables**:

- **`symbol`**: The stock ticker symbol, identifying the company (e.g., GOOG for Google).
- **`date`**: The trading date, essential for tracking time-based patterns.
- **`open`**: The stock’s opening price on a given day, indicating initial market sentiment.
- **`high`**: The highest price during the trading day, capturing upward volatility.
- **`low`**: The lowest price during the trading day, capturing downward volatility.
- **`close`**: The stock’s closing price, used as the primary outcome variable in the model.
- **`volume`**: Total shares traded, reflecting market activity and investor interest.
- **`adjusted`**: The closing price adjusted for corporate actions like splits or dividends, providing a normalized measure of value.

**Constructed Variables**:

- **`Price_Lag1`**: The closing price from the previous trading day, derived using `lag()`. This variable captures momentum and sequential trends in stock prices.
- **`Price_Diff`**: The difference between the current day’s closing price and the previous day’s, calculated as:
  $$
  \text{Price_Diff} = \text{close} - \text{Price_Lag1}
  $$
  This variable quantifies absolute daily price fluctuations.

- **`Price_Change_Percent`**: The percentage change in stock price relative to the previous day, calculated as:
  $$
  \text{Price_Change_Percent} = \frac{\text{close} - \text{Price_Lag1}}{\text{Price_Lag1}} \times 100
  $$
  This metric normalizes price changes, allowing for meaningful comparisons across time.

- **`Weekly_Avg_Close`**: A 7-day moving average of the closing price, constructed using `rollmean()`. This metric smooths short-term fluctuations to highlight weekly trends.

- **`Monthly_Avg_Close`**: A 30-day moving average of the closing price, capturing longer-term trends.

- **`Volatility`**: The 7-day rolling standard deviation of closing prices, computed using `rollapply()`. This variable measures short-term price variability, reflecting market stability or instability.

These variables provide a robust foundation for analyzing and predicting stock price behavior. They capture both raw market indicators and constructed metrics that reflect trends, volatility, and momentum.

### Outcome Variable

The outcome variable for this analysis is the **daily closing price (`close`)**, which serves as a standard measure of stock performance. The model aims to predict this variable using historical data and derived features.
```{r}
# Load necessary libraries
library(ggplot2)

# Create a histogram to visualize the distribution of the closing price
ggplot(price_analysis_data, aes(x = close)) +
  geom_histogram(
    bins = 30, 
    fill = "blue", 
    alpha = 0.7, 
    color = "black"
  ) +
  labs(
    title = "Distribution of Daily Closing Price",
    x = "Closing Price (USD)",
    y = "Frequency"
  ) +
  theme_minimal()
```

### Predictor Variables

To forecast the daily closing price (`close`), the model employs a comprehensive set of predictors derived from the cleaned dataset:

- **`Price_Lag1`**: The previous day’s closing price, capturing recent trends in stock movement.
- **`Price_Change_Percent`**: The proportional change in stock price compared to the previous day, normalizing variations across time.
- **`Weekly_Avg_Close`**: A smoothed metric of weekly price trends, reducing the impact of short-term volatility.
- **`Monthly_Avg_Close`**: A broader measure of stock performance, capturing monthly trends.
- **`Volatility`**: A measure of short-term variability, highlighting the extent of daily price fluctuations.
- **`volume`**: Daily trading activity, which often correlates with significant price movements.
- **`open`**, **`high`**, **`low`**: Intraday price metrics that reflect trading behavior throughout the day.

By leveraging these variables, the analysis captures temporal patterns, market activity, and volatility, providing a comprehensive framework for predicting daily stock price movements.

```{r}
# Select relevant variables, sample 5 random rows, and round to 2 decimal places
sampled_data <- price_analysis_data %>%
  select(
    Price_Lag1, Price_Change_Percent, Weekly_Avg_Close, 
    Monthly_Avg_Close, Volatility, volume, open, high, low
  ) %>%
  sample_n(5) %>%
  mutate(across(everything(), ~ round(.x, 2)))

# Display the sampled rows as a table
kable(sampled_data, caption = "Sample of Predictors for Daily Closing Price")
```


# Model

The goal of our modelling strategy is twofold. Firstly,...

Here we briefly describe the Bayesian analysis model used to investigate... Background details and diagnostics are included in [Appendix -@sec-model-details].

## Model set-up

Define $y_i$ as the number of seconds that the plane remained aloft. Then $\beta_i$ is the wing width and $\gamma_i$ is the wing length, both measured in millimeters.  

\begin{align} 
y_i|\mu_i, \sigma &\sim \mbox{Normal}(\mu_i, \sigma) \\
\mu_i &= \alpha + \beta_i + \gamma_i\\
\alpha &\sim \mbox{Normal}(0, 2.5) \\
\beta &\sim \mbox{Normal}(0, 2.5) \\
\gamma &\sim \mbox{Normal}(0, 2.5) \\
\sigma &\sim \mbox{Exponential}(1)
\end{align}

We run the model in R [@citeR] using the `rstanarm` package of @rstanarm. We use the default priors from `rstanarm`.
```{r}
#| echo: false
#| eval: true
#| warning: false
#| message: false

library(xgboost)

google_xgb_model <-
  readRDS(file = here::here("models/google_model.rds"))
```

### Model justification

We expect a positive relationship between the size of the wings and time spent aloft. In particular...

We can use maths by including latex between dollar signs, for instance $\theta$.

### Model Evaluation
```{r}


# Define future dates for Q1 2025
future_dates <- seq.Date(as.Date("2025-01-01"), as.Date("2025-03-31"), by = "day")

# Initialize future data based on the last row of training data
last_row_of_train_data <- model_data %>% tail(1)
current_features <- last_row_of_train_data %>%
  select(Price_Lag1, Weekly_Avg_Close, Monthly_Avg_Close, Volatility, volume, date_numeric)

# Initialize predicted prices for Q1 2025
predicted_prices <- data.frame(
  date = future_dates,
  Predicted_Close = NA
)

# Ensure feature names match between current_features and trained model
trained_feature_names <- xgb_model$feature_names # Features used during training

# Initialize current_features with missing feature and match column order
current_features <- last_row_of_train_data %>%
  mutate(
    Price_Change_Percent = 0 # Add missing feature with a default value
  ) %>%
  select(all_of(trained_feature_names)) # Ensure column order matches training data

# Loop for dynamic predictions
for (i in seq_along(predicted_prices$date)) {
  # Ensure current_features matches model feature names
  current_features_matrix <- current_features %>%
    select(all_of(trained_feature_names)) %>% # Match feature names and order
    as.matrix() # Convert to matrix for XGBoost
  
  # Predict the stock price for the current day
  predicted_price <- predict(xgb_model, newdata = current_features_matrix)
  
  # Store the predicted price
  predicted_prices$Predicted_Close[i] <- predicted_price
  
  # Dynamically update features
  current_features <- data.frame(
    Price_Lag1 = predicted_price,
    Weekly_Avg_Close = if (i >= 7) {
      mean(predicted_prices$Predicted_Close[(i - 6):i], na.rm = TRUE)
    } else {
      current_features$Weekly_Avg_Close
    },
    Monthly_Avg_Close = if (i >= 30) {
      mean(predicted_prices$Predicted_Close[(i - 29):i], na.rm = TRUE)
    } else {
      current_features$Monthly_Avg_Close
    },
    Volatility = current_features$Volatility, # Assuming volatility is static
    volume = current_features$volume, # Keep volume constant
    date_numeric = as.numeric(predicted_prices$date[i]), # Update date
    Price_Change_Percent = ifelse(
      !is.na(current_features$Price_Lag1) & current_features$Price_Lag1 != 0,
      ((current_features$Price_Lag1 - predicted_price) / current_features$Price_Lag1) * 100,
      0
    ) # Dynamically update Price_Change_Percent
  )
  
  # Ensure current_features matches training features after updates
  current_features <- current_features %>%
    select(all_of(trained_feature_names)) # Match feature names and order
}

```



# Results
## Predicted Google Stock Prices for Q1 2025
This visualization presents the day-by-day predicted stock prices for Google in Q1 2025. The predictions show notable volatility in January, followed by a stabilization trend through February and March. These fluctuations in January suggest that the model anticipates a higher degree of uncertainty during this period. However, the leveling off in February and March indicates greater price consistency as the quarter progresses. This trend reflects how market patterns might stabilize over time, emphasizing the model’s ability to project temporal changes in volatility.
```{r}
# Predicted Stock Price Trend for Q1 2025
library(ggplot2)

ggplot(predicted_prices, aes(x = date, y = Predicted_Close)) +
  geom_line(color = "blue", size = 1) +
  labs(
    title = "Predicted Google Stock Prices for Q1 2025",
    x = "Date",
    y = "Predicted Stock Price"
  ) +
  theme_minimal()

```
## Weekly Predicted Stock Price Trends (Q1 2025)
```{r}
predicted_weekly <- predicted_prices %>%
  mutate(Week = floor_date(date, "week")) %>%
  group_by(Week) %>%
  summarize(Average_Price = mean(Predicted_Close))

ggplot(predicted_weekly, aes(x = Week, y = Average_Price)) +
  geom_line(color = "blue") +
  labs(
    title = "Weekly Predicted Stock Price Trends (Q1 2025)",
    x = "Week",
    y = "Average Predicted Price"
  ) +
  scale_x_date(
    date_labels = "%b %d",  # Format: Month Day (e.g., Jan 01)
    date_breaks = "1 week"  # Show a tick for each week
  ) +
  theme_minimal()


```

## Comparison of Historical and Predicted Average Prices
The bar chart compares the average Google stock price from the historical period (2018–2023) to the predicted average for Q1 2025. The predicted average stock price for Q1 2025 is significantly higher than the historical average, suggesting a potential upward trajectory in Google’s stock performance. This result underscores the model's expectation of positive growth in the stock price, likely influenced by broader market trends or anticipated company performance improvements.
```{r}
# Comparison of Historical and Predicted Average Prices
historical_avg <- mean(train_data$close, na.rm = TRUE)
predicted_avg <- mean(predicted_prices$Predicted_Close, na.rm = TRUE)

average_prices <- data.frame(
  Period = c("Historical (2018–2023)", "Predicted (Q1 2025)"),
  Average_Stock_Price = c(historical_avg, predicted_avg)
)

ggplot(average_prices, aes(x = Period, y = Average_Stock_Price, fill = Period)) +
  geom_bar(stat = "identity", width = 0.6) +
  labs(
    title = "Comparison of Historical and Predicted Average Prices",
    x = "Period",
    y = "Average Stock Price"
  ) +
  theme_minimal() +
  scale_fill_manual(values = c("skyblue", "lightyellow"))

```
## Predicted Volatility Distribution for Q1 2025
This density plot illustrates the distribution of daily price changes predicted for Q1 2025. The presence of two peaks suggests a bimodal distribution of price changes, indicating two distinct regimes of price movement—one with minor fluctuations and another with moderate changes. This bimodal nature could represent periods of relative market stability interspersed with higher activity, providing deeper insights into the behavior of the stock price over the forecasted period.
```{r}
# Predicted Volatility Distribution
library(dplyr)

predicted_volatility <- predicted_prices %>%
  mutate(Daily_Change = Predicted_Close - lag(Predicted_Close)) %>%
  drop_na()

ggplot(predicted_volatility, aes(x = abs(Daily_Change))) +
  geom_density(fill = "lightblue", alpha = 0.5) +
  labs(
    title = "Predicted Volatility Distribution for Q1 2025",
    x = "Daily Price Change",
    y = "Density"
  ) +
  theme_minimal()

```

## Monthly Breakdown of Predicted Stock Prices (Q1 2025)
The bar chart provides a monthly breakdown of the predicted average stock prices for January, February, and March 2025. The nearly uniform heights of the bars indicate consistency in average prices across the months. This stability aligns with the trends observed in the day-by-day predictions, reinforcing the model's expectation of reduced volatility after January. The monthly breakdown helps interpret the overall trend on a finer scale, ensuring a comprehensive understanding of stock performance over time.
```{r}
# Monthly Breakdown of Predicted Prices
predicted_monthly <- predicted_prices %>%
  mutate(Month = format(date, "%B")) %>%
  group_by(Month) %>%
  summarise(Average_Predicted_Price = mean(Predicted_Close, na.rm = TRUE)) %>%
  arrange(match(Month, month.name)) # Ensure correct month order

ggplot(predicted_monthly, aes(x = Month, y = Average_Predicted_Price, fill = Month)) +
  geom_bar(stat = "identity", width = 0.6) +
  labs(
    title = "Monthly Breakdown of Predicted Stock Prices (Q1 2025)",
    x = "Month",
    y = "Average Predicted Price"
  ) +
  theme_minimal() +
  scale_fill_brewer(palette = "Pastel1")

```

## Alternate Results
```{r}
ggplot(predicted_prices, aes(x = date, y = Predicted_Close)) +
  geom_line(color = "blue") +
  labs(
    title = "Predicted Google Stock Prices for Q1 2025",
    x = "Date",
    y = "Predicted Stock Price"
  ) +
  theme_minimal()

```

```{r}
predicted_weekly <- predicted_prices %>%
  mutate(Week = floor_date(date, "week")) %>%
  group_by(Week) %>%
  summarize(Average_Price = mean(Predicted_Close))

ggplot(predicted_weekly, aes(x = Week, y = Average_Price)) +
  geom_line(color = "blue") +
  labs(
    title = "Weekly Predicted Stock Price Trends (Q1 2025)",
    x = "Week",
    y = "Average Predicted Price"
  ) +
  scale_x_date(
    date_labels = "%b %d",  # Format: Month Day (e.g., Jan 01)
    date_breaks = "1 week"  # Show a tick for each week
  ) +
  theme_minimal()


```
```{r}
predicted_monthly <- predicted_prices %>%
  mutate(Month = month(date, label = TRUE)) %>%
  group_by(Month) %>%
  summarize(Average_Price = mean(Predicted_Close))

ggplot(predicted_monthly, aes(x = Month, y = Average_Price, fill = Month)) +
  geom_bar(stat = "identity") +
  labs(
    title = "Monthly Breakdown of Predicted Stock Prices (Q1 2025)",
    x = "Month",
    y = "Average Predicted Price"
  ) +
  theme_minimal() +
  theme(legend.position = "none")

```

```{r}
predicted_prices <- predicted_prices %>%
  mutate(Daily_Change = abs(Predicted_Close - lag(Predicted_Close, default = first(Predicted_Close))))

ggplot(predicted_prices, aes(x = Daily_Change)) +
  geom_density(fill = "lightblue", alpha = 0.5) +
  labs(
    title = "Predicted Volatility Distribution for Q1 2025",
    x = "Daily Price Change",
    y = "Density"
  ) +
  theme_minimal()

```



Our results are summarized in @tbl-modelresults.

```{r}
#| echo: false
#| eval: true
#| label: tbl-modelresults
#| tbl-cap: "Explanatory models of flight time based on wing width and wing length"
#| warning: false

# Combine actual and predicted values for the test set
test_results <- data.frame(
  Date = test_data$date,
  Actual = y_test,
  Predicted = y_pred_test
)

# Line plot of actual vs. predicted values
library(ggplot2)
ggplot(test_results, aes(x = Date)) +
  geom_line(aes(y = Actual, color = "Actual")) +
  geom_line(aes(y = Predicted, color = "Predicted")) +
  labs(
    title = "Actual vs. Predicted Stock Prices on Test Data",
    x = "Date",
    y = "Stock Price",
    color = "Legend"
  ) +
  theme_minimal()

```



### Model Evaluation
```{r}
#| echo: false
#| eval: true
#| label: tbl-modelresults
#| fig-cap: "Predicted Google Stock Prices for Q1 2025"
#| warning: false

# Line plot of predicted prices for Q1 2025
ggplot(predicted_prices, aes(x = date, y = Predicted_Close)) +
  geom_line(color = "blue") +
  labs(
    x = "Date",
    y = "Predicted Stock Price"
  ) +
  theme_minimal()

```

```{r}
#| echo: false
#| eval: true
#| label: tbl-modelresults
#| tbl-cap: "Comparison of Historical and Predicted Average Prices"
#| warning: false

# Combine historical and predicted prices
historical_avg <- data.frame(
  Period = c("Historical (2018–2023)", "Predicted (Q1 2025)"),
  Avg_Price = c(mean(train_data$close), mean(predicted_prices$Predicted_Close))
)

# Bar chart for comparison
ggplot(historical_avg, aes(x = Period, y = Avg_Price, fill = Period)) +
  geom_bar(stat = "identity") +
  labs(
    x = "Period",
    y = "Average Stock Price"
  ) +
  theme_minimal() +
  scale_fill_brewer(palette = "Set3")

```
The bar chart in Figure X compares the historical average stock price of Google during the training period (2018–2023) with the model's predicted average stock price for Q1 2025. The historical average, represented by the green bar, reflects trends captured by the model based solely on training data, excluding 2024 to avoid data leakage and ensure a robust comparison. The predicted average for Q1 2025, shown by the yellow bar, reveals a substantial increase in the forecasted stock price compared to historical trends.

This separation between historical and predicted data highlights the model's ability to generalize future predictions based on patterns observed during the training period. Excluding 2024 ensures the integrity of the analysis by preventing overlap between evaluation data and training data, allowing a clear distinction between past performance and future expectations. The observed upward trend in the predicted prices suggests a potential growth trajectory for Google's stock in early 2025, reflecting either consistent upward momentum identified by the model in historical data or the influence of key predictors like recent price changes and volatility.

# Discussion

## First discussion point {#sec-first-point}

If my paper were 10 pages, then should be be at least 2.5 pages. The discussion is a chance to show off what you know and what you learnt from all this. 

## Second discussion point

Please don't use these as sub-heading labels - change them to be what your point actually is.

## Third discussion point

## Weaknesses and next steps

Weaknesses and next steps should also be included.

\newpage

\appendix

# Appendix {-}


# Additional data details

# Model details {#sec-model-details}

## Model Performance Metrics


```{r}
#| echo: false
#| eval: true
#| label: tbl-modelresults
#| tbl-cap: "Explanatory models of flight time based on wing width and wing length"
#| warning: false

library(knitr)

# Create a data frame for performance metrics
performance_metrics <- data.frame(
  Metric = c("RMSE", "MAE"),
  Value = c(rmse_value, mae_value)
)

# Display the table
kable(performance_metrics, caption = "Model Performance Metrics on Test Data")

```

## Model Features
```{r}
#| echo: false
#| eval: true
#| label: fig-modelfeatues
#| tbl-cap: "Feature Importance"
#| warning: false

# Bar plot of feature importance
xgb.plot.importance(
  importance_matrix,
  main = "Feature Importance",
  rel_to_first = TRUE,
  top_n = 10
)

```





\newpage


# References


