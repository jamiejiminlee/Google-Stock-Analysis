---
title: "My title"
subtitle: "My subtitle if needed"
author: 
  - First author
  - Another author
thanks: "Code and data are available at: [https://github.com/RohanAlexander/starter_folder](https://github.com/RohanAlexander/starter_folder)."
date: today
date-format: long
abstract: "First sentence. Second sentence. Third sentence. Fourth sentence."
format: pdf
number-sections: true
bibliography: references.bib
---

```{r}
#| include: false
#| warning: false
#| message: false

library(tidyverse)
library(arrow)


#### Load Cleaned Data ####
price_analysis_data <- read_parquet(here::here("data/02-analysis_data/google_analysis_data.parquet"))
```


# Introduction

Overview paragraph

Estimand paragraph

Results paragraph

Why it matters paragraph

Telegraphing paragraph: The remainder of this paper is structured as follows. @sec-data....






# Data {#sec-data}

## Overview

We use the statistical programming language R [@citeR].... Our data [@shelter].... Following @tellingstories, we consider...

Overview text

## Measurement
	
Some paragraphs about how we go from a phenomena in the world to an entry in the dataset.

## Outcome variables

Add graphs, tables and text. Use sub-sub-headings for each outcome variable or update the subheading to be singular.



Some of our data is of penguins (@fig-bills), from @palmerpenguins.

```{r}
#| label: fig-bills
#| fig-cap: Bills of penguins
#| echo: false

ggplot(penguins, aes(x = island, fill = species)) +
  geom_bar(alpha = 0.8) +
  scale_fill_manual(values = c("darkorange","purple","cyan4"),
                    guide = "none") +
  theme_minimal() +
  facet_wrap(~species, ncol = 1) +
  coord_flip()
```

Talk more about it.

And also planes (@fig-planes). (You can change the height and width, but don't worry about doing that until you have finished every other aspect of the paper - Quarto will try to make it look nice and the defaults usually work well once you have enough text.)

```{r}
#| label: fig-planes
#| fig-cap: Relationship between wing length and width
#| echo: false
#| warning: false
#| message: false


analysis_data |> 
  ggplot(aes(x = width, y = length)) +
  geom_point(alpha = 0.8) +
  theme_minimal() +
  labs(x = "Wing width (mm)",
       y = "Wing length (mm)")
```

Talk way more about it. 

## Predictor variables

Add graphs, tables and text.

Use sub-sub-headings for each outcome variable and feel free to combine a few into one if they go together naturally.








# Model

The goal of our modelling strategy is twofold. Firstly,...

Here we briefly describe the Bayesian analysis model used to investigate... Background details and diagnostics are included in [Appendix -@sec-model-details].

## Model set-up

Define $y_i$ as the number of seconds that the plane remained aloft. Then $\beta_i$ is the wing width and $\gamma_i$ is the wing length, both measured in millimeters.  

\begin{align} 
y_i|\mu_i, \sigma &\sim \mbox{Normal}(\mu_i, \sigma) \\
\mu_i &= \alpha + \beta_i + \gamma_i\\
\alpha &\sim \mbox{Normal}(0, 2.5) \\
\beta &\sim \mbox{Normal}(0, 2.5) \\
\gamma &\sim \mbox{Normal}(0, 2.5) \\
\sigma &\sim \mbox{Exponential}(1)
\end{align}

We run the model in R [@citeR] using the `rstanarm` package of @rstanarm. We use the default priors from `rstanarm`.
```{r}
#| echo: false
#| eval: true
#| warning: false
#| message: false

library(xgboost)

google_xgb_model <-
  readRDS(file = here::here("models/google_model.rds"))
```

### Model justification

We expect a positive relationship between the size of the wings and time spent aloft. In particular...

We can use maths by including latex between dollar signs, for instance $\theta$.

### Model Evaluation
```{r}


# Define future dates for Q1 2025
future_dates <- seq.Date(as.Date("2025-01-01"), as.Date("2025-03-31"), by = "day")

# Initialize future data based on the last row of training data
last_row_of_train_data <- model_data %>% tail(1)
current_features <- last_row_of_train_data %>%
  select(Price_Lag1, Weekly_Avg_Close, Monthly_Avg_Close, Volatility, volume, date_numeric)

# Initialize predicted prices for Q1 2025
predicted_prices <- data.frame(
  date = future_dates,
  Predicted_Close = NA
)

# Ensure feature names match between current_features and trained model
trained_feature_names <- xgb_model$feature_names # Features used during training

# Initialize current_features with missing feature and match column order
current_features <- last_row_of_train_data %>%
  mutate(
    Price_Change_Percent = 0 # Add missing feature with a default value
  ) %>%
  select(all_of(trained_feature_names)) # Ensure column order matches training data

# Loop for dynamic predictions
for (i in seq_along(predicted_prices$date)) {
  # Ensure current_features matches model feature names
  current_features_matrix <- current_features %>%
    select(all_of(trained_feature_names)) %>% # Match feature names and order
    as.matrix() # Convert to matrix for XGBoost
  
  # Predict the stock price for the current day
  predicted_price <- predict(xgb_model, newdata = current_features_matrix)
  
  # Store the predicted price
  predicted_prices$Predicted_Close[i] <- predicted_price
  
  # Dynamically update features
  current_features <- data.frame(
    Price_Lag1 = predicted_price,
    Weekly_Avg_Close = if (i >= 7) {
      mean(predicted_prices$Predicted_Close[(i - 6):i], na.rm = TRUE)
    } else {
      current_features$Weekly_Avg_Close
    },
    Monthly_Avg_Close = if (i >= 30) {
      mean(predicted_prices$Predicted_Close[(i - 29):i], na.rm = TRUE)
    } else {
      current_features$Monthly_Avg_Close
    },
    Volatility = current_features$Volatility, # Assuming volatility is static
    volume = current_features$volume, # Keep volume constant
    date_numeric = as.numeric(predicted_prices$date[i]), # Update date
    Price_Change_Percent = ifelse(
      !is.na(current_features$Price_Lag1) & current_features$Price_Lag1 != 0,
      ((current_features$Price_Lag1 - predicted_price) / current_features$Price_Lag1) * 100,
      0
    ) # Dynamically update Price_Change_Percent
  )
  
  # Ensure current_features matches training features after updates
  current_features <- current_features %>%
    select(all_of(trained_feature_names)) # Match feature names and order
}

```



# Results

```{r}
# Predicted Stock Price Trend for Q1 2025
library(ggplot2)

ggplot(predicted_prices, aes(x = date, y = Predicted_Close)) +
  geom_line(color = "blue", size = 1) +
  labs(
    title = "Predicted Google Stock Prices for Q1 2025",
    x = "Date",
    y = "Predicted Stock Price"
  ) +
  theme_minimal()

```

```{r}
# Comparison of Historical and Predicted Average Prices
historical_avg <- mean(train_data$close, na.rm = TRUE)
predicted_avg <- mean(predicted_prices$Predicted_Close, na.rm = TRUE)

average_prices <- data.frame(
  Period = c("Historical (2018–2023)", "Predicted (Q1 2025)"),
  Average_Stock_Price = c(historical_avg, predicted_avg)
)

ggplot(average_prices, aes(x = Period, y = Average_Stock_Price, fill = Period)) +
  geom_bar(stat = "identity", width = 0.6) +
  labs(
    title = "Comparison of Historical and Predicted Average Prices",
    x = "Period",
    y = "Average Stock Price"
  ) +
  theme_minimal() +
  scale_fill_manual(values = c("skyblue", "lightyellow"))

```

```{r}
# Predicted Volatility Distribution
library(dplyr)

predicted_volatility <- predicted_prices %>%
  mutate(Daily_Change = Predicted_Close - lag(Predicted_Close)) %>%
  drop_na()

ggplot(predicted_volatility, aes(x = abs(Daily_Change))) +
  geom_density(fill = "lightblue", alpha = 0.5) +
  labs(
    title = "Predicted Volatility Distribution for Q1 2025",
    x = "Daily Price Change",
    y = "Density"
  ) +
  theme_minimal()

```

```{r}
# Monthly Breakdown of Predicted Prices
predicted_monthly <- predicted_prices %>%
  mutate(Month = format(date, "%B")) %>%
  group_by(Month) %>%
  summarise(Average_Predicted_Price = mean(Predicted_Close, na.rm = TRUE)) %>%
  arrange(match(Month, month.name)) # Ensure correct month order

ggplot(predicted_monthly, aes(x = Month, y = Average_Predicted_Price, fill = Month)) +
  geom_bar(stat = "identity", width = 0.6) +
  labs(
    title = "Monthly Breakdown of Predicted Stock Prices (Q1 2025)",
    x = "Month",
    y = "Average Predicted Price"
  ) +
  theme_minimal() +
  scale_fill_brewer(palette = "Pastel1")

```


Our results are summarized in @tbl-modelresults.

```{r}
#| echo: false
#| eval: true
#| label: tbl-modelresults
#| tbl-cap: "Explanatory models of flight time based on wing width and wing length"
#| warning: false

# Combine actual and predicted values for the test set
test_results <- data.frame(
  Date = test_data$date,
  Actual = y_test,
  Predicted = y_pred_test
)

# Line plot of actual vs. predicted values
library(ggplot2)
ggplot(test_results, aes(x = Date)) +
  geom_line(aes(y = Actual, color = "Actual")) +
  geom_line(aes(y = Predicted, color = "Predicted")) +
  labs(
    title = "Actual vs. Predicted Stock Prices on Test Data",
    x = "Date",
    y = "Stock Price",
    color = "Legend"
  ) +
  theme_minimal()

```



### Model Evaluation
```{r}
#| echo: false
#| eval: true
#| label: tbl-modelresults
#| fig-cap: "Predicted Google Stock Prices for Q1 2025"
#| warning: false

# Line plot of predicted prices for Q1 2025
ggplot(predicted_prices, aes(x = date, y = Predicted_Close)) +
  geom_line(color = "blue") +
  labs(
    x = "Date",
    y = "Predicted Stock Price"
  ) +
  theme_minimal()

```

```{r}
#| echo: false
#| eval: true
#| label: tbl-modelresults
#| tbl-cap: "Comparison of Historical and Predicted Average Prices"
#| warning: false

# Combine historical and predicted prices
historical_avg <- data.frame(
  Period = c("Historical (2018–2023)", "Predicted (Q1 2025)"),
  Avg_Price = c(mean(train_data$close), mean(predicted_prices$Predicted_Close))
)

# Bar chart for comparison
ggplot(historical_avg, aes(x = Period, y = Avg_Price, fill = Period)) +
  geom_bar(stat = "identity") +
  labs(
    x = "Period",
    y = "Average Stock Price"
  ) +
  theme_minimal() +
  scale_fill_brewer(palette = "Set3")

```
The bar chart in Figure X compares the historical average stock price of Google during the training period (2018–2023) with the model's predicted average stock price for Q1 2025. The historical average, represented by the green bar, reflects trends captured by the model based solely on training data, excluding 2024 to avoid data leakage and ensure a robust comparison. The predicted average for Q1 2025, shown by the yellow bar, reveals a substantial increase in the forecasted stock price compared to historical trends.

This separation between historical and predicted data highlights the model's ability to generalize future predictions based on patterns observed during the training period. Excluding 2024 ensures the integrity of the analysis by preventing overlap between evaluation data and training data, allowing a clear distinction between past performance and future expectations. The observed upward trend in the predicted prices suggests a potential growth trajectory for Google's stock in early 2025, reflecting either consistent upward momentum identified by the model in historical data or the influence of key predictors like recent price changes and volatility.

# Discussion

## First discussion point {#sec-first-point}

If my paper were 10 pages, then should be be at least 2.5 pages. The discussion is a chance to show off what you know and what you learnt from all this. 

## Second discussion point

Please don't use these as sub-heading labels - change them to be what your point actually is.

## Third discussion point

## Weaknesses and next steps

Weaknesses and next steps should also be included.

\newpage

\appendix

# Appendix {-}


# Additional data details

# Model details {#sec-model-details}

## Model Performance Metrics


```{r}
#| echo: false
#| eval: true
#| label: tbl-modelresults
#| tbl-cap: "Explanatory models of flight time based on wing width and wing length"
#| warning: false

library(knitr)

# Create a data frame for performance metrics
performance_metrics <- data.frame(
  Metric = c("RMSE", "MAE"),
  Value = c(rmse_value, mae_value)
)

# Display the table
kable(performance_metrics, caption = "Model Performance Metrics on Test Data")

```

## Model Features
```{r}
#| echo: false
#| eval: true
#| label: fig-modelfeatues
#| tbl-cap: "Feature Importance"
#| warning: false

# Bar plot of feature importance
xgb.plot.importance(
  importance_matrix,
  main = "Feature Importance",
  rel_to_first = TRUE,
  top_n = 10
)

```





\newpage


# References


